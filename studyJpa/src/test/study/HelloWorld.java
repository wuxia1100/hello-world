package study;

/**
 * 一 命名规范：字母，数字，汉字，特殊符号，空格：名字是由符号组成，所有能想到的符号，和组合
 * 可以创建规范：不遵循，不让你创建，你就别用
 *  a 字母，可以
 *  b 汉字  可以
 *  c 数字，不能作为开头，可以在中间或者结尾
 *  d 特殊符号，可以用"$","_",等特殊符号:$ 连接符(猜测)，_ 分隔符(猜测是这个用)
 *  e 空格 不可以，中间不可以，开头和结尾会自动格式化成没有
 *  f 不能使用java关键字和保留字，但可以包含:如果包名使用能创建，但是会被java忽略，不被管理到，
 *      文件夹下不能创建java文件
 * 通用代码规范：大家都这样做，你不这样，别人看不懂你的程序，看的很费劲，让别人难受找骂，你就自己玩吧
 * a 字母，常用，首字母大写，遵循驼峰式
 * b 汉字 没见过
 * c 数字，没见过
 * d 特殊字符，只在内部类见过
 * e 方法：首字母小写，驼峰式
 * f static属性：字母全部大写，"_"分割
 * g 包名：项目组织名,IP域名.cn.org.等，为了给别人依赖使用便于区分，不会出现包名重复
 * 好处
 * 1 可以创建，使用
 * 2 可以识别：标识，姓名，路牌
 * 3 容易交流：中国人都讲中国话
 * 总结
 * 1 日常字符都可以用来命名
 * 2 遵循命名规范
 * 3 遵循命名习惯：大家通常这样做
 * 4 遵循命名要求：关键字，保留字
 * 5 空格不是字符，也不是分隔符，只是空间上的分割，可以用"_"分割符号
 * 6 命名种类：包名，类名，方法名，属性名
 * 7 遵循就完事，没必要扯太多
 *     class 你$a012汉_d0_$ {
 *         int _$我;
 *         public void _$你(){
 *         }
 *     }
 * 二 访问权限修饰符：public protected private 省略(同包),四种
 *  public：任何地方可以访问：完全开放
 *  protected:包或者子类，可见：继承体系，可以用，别人就别用了，除非是邻居（有一定关系）
 *  省略(同包)：包可见：邻居，同一类人，一群人，彼此交互，一个模块模块而言
 *  private:类可见 ：用户对象封装，只能自己修改，任何其它人不能修改
 *  好处
 *   1 也就是为什么要有权限控制，完全开放不好吗
 *   2 权限控制的意义就是不让别人修改和使用，但不让别人修改和使用有什么意义呢
 *   3 为了避免干扰，彼此独立，互不干涉，
 *   4 我不准你影响我和我不去影响你，虽然是一个结果，但是两个概念
 *   5 我不准就一定不会被影响，就一定不会出事
 *   6 我不去影响，别人可能去影响，就存在隐患，存在bug
 *   7 那为啥不都是private，因为除了私人隐私，还要和别人玩耍啊，一个人咋活
 *    所以就是有些我可以给你，有些看心情，有些完全不给，不能一概而论，太死板就不可爱了
 *    不能全部自私，也不能全部开放
 *  总结
 *   1 访问权限级别，就是抗干扰级别，安全级别
 *   2 消除变化，消除影响，消除隐患，消除bug
 *   3 就是为了有意识，有选择的不让你乱改,乱用，看到
 *  使用
 *   1 类部自己的逻辑，别人调用时，私有，避免别人调用时作为干扰信息
 * 三 类修饰符：class,abstract,interface,enum，
 *   1 class:普通类，事物的抽象：在代码中就是具体，是对现实世界的抽象，对于现实世界而言，它是抽象的
 *      但是在代码世界里，它就是具体的
 *   2 abstract:抽象类 ，事物某些特殊行为，特性的抽象
 *     a 基于事物的抽象，也就是代码世界的具体，在此基础上，再对类(具体)中某些行为的抽象
 *     如果全部是可以，需要抽象的，就是接口，如果有一部分是可以，需要抽象的就是抽象类
 *   3 interface:接口，事物某些特殊行为，特性中，更具体的某个，几个特殊行为，特性的抽象
 *     a 基于抽象的行为，所以，也应该全部是抽象的
 *   4 enum:枚举,一个抽象事物，只有定义的几个具体对象，或者一件事物的具体几个状态（多态）
 *     a 使用的时候很明确，可以看到，明确哪几种，很清晰，需要谁选谁就行
 *   总结
 *      1 抽象类是蓝图，模板，设计稿，接口是蓝图上的一个个模块（抽象方法），分给不同的人做（具体实现类）
 *      继承抽象类的那个类就是构建者，最终的产品
 *      流水线模式，分工模式
 *      全部由继承者实现抽象方法，是织布机模式（全栈模式），一个人实现所有的事
 */
public class HelloWorld {
    我sdf你 a = new 我sdf你();



}
